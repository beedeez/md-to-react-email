{"version":3,"sources":["../src/parser.ts","../src/utils.ts","../src/styles.ts","../src/parseMarkdownToJSX.ts","../src/components/emailMarkdown.tsx"],"names":["styles"],"mappings":"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","sourcesContent":["import { CustomRenderersType } from './types';\n\nimport { marked, Renderer } from 'marked';\nimport { StylesType } from './types';\nimport { initRenderer } from './utils';\n\nexport class MarkdownParser {\n\tprivate readonly renderer: Renderer;\n\n\tconstructor({\n\t\tcustomStyles,\n\t\tcustomRenderers,\n\t}: {\n\t\tcustomStyles?: StylesType;\n\t\tcustomRenderers?: CustomRenderersType;\n\t}) {\n\t\tthis.renderer = initRenderer({ customStyles, customRenderers });\n\t}\n\n\tparse(markdown: string) {\n\t\treturn marked.parse(markdown, { renderer: this.renderer });\n\t}\n}\n","import { CSSProperties } from 'react';\nimport { StylesType, initRendererProps } from './types';\nimport { Renderer } from 'marked';\nimport { styles } from './styles';\n\nfunction escapeQuotes(value: unknown) {\n\tif (typeof value === 'string' && value.includes('\"')) {\n\t\treturn value.replace(/\"/g, '&#x27;');\n\t}\n\treturn value;\n}\n\nexport function camelToKebabCase(str: string): string {\n\treturn str.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();\n}\n\nexport function parseCssInJsToInlineCss(\n\tcssProperties: CSSProperties | undefined\n): string {\n\tif (!cssProperties) return '';\n\n\tconst numericalCssProperties = [\n\t\t'width',\n\t\t'height',\n\t\t'margin',\n\t\t'marginTop',\n\t\t'marginRight',\n\t\t'marginBottom',\n\t\t'marginLeft',\n\t\t'padding',\n\t\t'paddingTop',\n\t\t'paddingRight',\n\t\t'paddingBottom',\n\t\t'paddingLeft',\n\t\t'borderWidth',\n\t\t'borderTopWidth',\n\t\t'borderRightWidth',\n\t\t'borderBottomWidth',\n\t\t'borderLeftWidth',\n\t\t'outlineWidth',\n\t\t'top',\n\t\t'right',\n\t\t'bottom',\n\t\t'left',\n\t\t'fontSize',\n\t\t'lineHeight',\n\t\t'letterSpacing',\n\t\t'wordSpacing',\n\t\t'maxWidth',\n\t\t'minWidth',\n\t\t'maxHeight',\n\t\t'minHeight',\n\t\t'borderRadius',\n\t\t'borderTopLeftRadius',\n\t\t'borderTopRightRadius',\n\t\t'borderBottomLeftRadius',\n\t\t'borderBottomRightRadius',\n\t\t'textIndent',\n\t\t'gridColumnGap',\n\t\t'gridRowGap',\n\t\t'gridGap',\n\t\t'translateX',\n\t\t'translateY',\n\t];\n\n\treturn Object.entries(cssProperties)\n\t\t.map(([property, value]) => {\n\t\t\tif (\n\t\t\t\ttypeof value === 'number' &&\n\t\t\t\tnumericalCssProperties.includes(property)\n\t\t\t) {\n\t\t\t\treturn `${camelToKebabCase(property)}:${value}px`;\n\t\t\t} else {\n\t\t\t\tconst escapedValue = escapeQuotes(value);\n\t\t\t\treturn `${camelToKebabCase(property)}:${escapedValue}`;\n\t\t\t}\n\t\t})\n\t\t.join(';');\n}\n\nexport const initRenderer = ({\n\tcustomStyles,\n\tcustomRenderers: overrideRenderers,\n}: initRendererProps): Renderer => {\n\tconst finalStyles = { ...styles, ...customStyles };\n\n\tconst customRenderer = new Renderer();\n\n\tcustomRenderer.blockquote = (quote) => {\n\t\treturn `<blockquote${\n\t\t\tparseCssInJsToInlineCss(finalStyles.blockQuote) !== ''\n\t\t\t\t? ` style=\"${parseCssInJsToInlineCss(finalStyles.blockQuote)}\"`\n\t\t\t\t: ''\n\t\t}>\\n${quote}</blockquote>\\n`;\n\t};\n\n\tcustomRenderer.br = () => {\n\t\treturn `<br${\n\t\t\tparseCssInJsToInlineCss(finalStyles.br) !== ''\n\t\t\t\t? ` style=\"${parseCssInJsToInlineCss(finalStyles.br)}\"`\n\t\t\t\t: ''\n\t\t} />`;\n\t};\n\n\tcustomRenderer.code = (code) => {\n\t\tcode = code.replace(/\\n$/, '') + '\\n';\n\n\t\treturn `<pre${\n\t\t\tparseCssInJsToInlineCss(finalStyles.codeBlock) !== ''\n\t\t\t\t? ` style=\"${parseCssInJsToInlineCss(finalStyles.codeBlock)}\"`\n\t\t\t\t: ''\n\t\t}><code>${code}</code></pre>\\n`;\n\t};\n\n\tcustomRenderer.codespan = (text) => {\n\t\treturn `<code${\n\t\t\tparseCssInJsToInlineCss(finalStyles.codeInline) !== ''\n\t\t\t\t? ` style=\"${parseCssInJsToInlineCss(finalStyles.codeInline)}\"`\n\t\t\t\t: ''\n\t\t}>${text}</code>`;\n\t};\n\n\tcustomRenderer.del = (text) => {\n\t\treturn `<del${\n\t\t\tparseCssInJsToInlineCss(finalStyles.strikethrough) !== ''\n\t\t\t\t? ` style=\"${parseCssInJsToInlineCss(finalStyles.strikethrough)}\"`\n\t\t\t\t: ''\n\t\t}>${text}</del>`;\n\t};\n\n\tcustomRenderer.em = (text) => {\n\t\treturn `<em${\n\t\t\tparseCssInJsToInlineCss(finalStyles.italic) !== ''\n\t\t\t\t? ` style=\"${parseCssInJsToInlineCss(finalStyles.italic)}\"`\n\t\t\t\t: ''\n\t\t}>${text}</em>`;\n\t};\n\n\tcustomRenderer.heading = (text, level) => {\n\t\treturn `<h${level}${\n\t\t\tparseCssInJsToInlineCss(finalStyles[`h${level}` as keyof StylesType]) !==\n\t\t\t''\n\t\t\t\t? ` style=\"${parseCssInJsToInlineCss(\n\t\t\t\t\t\tfinalStyles[`h${level}` as keyof StylesType]\n\t\t\t\t\t)}\"`\n\t\t\t\t: ''\n\t\t}>${text}</h${level}>`;\n\t};\n\n\tcustomRenderer.hr = () => {\n\t\treturn `<hr${\n\t\t\tparseCssInJsToInlineCss(finalStyles.hr) !== ''\n\t\t\t\t? ` style=\"${parseCssInJsToInlineCss(finalStyles.hr)}\"`\n\t\t\t\t: ''\n\t\t} />\\n`;\n\t};\n\n\tcustomRenderer.image = (href, _, text) => {\n\t\treturn `<img src=\"${href}\" alt=\"${text}\"${\n\t\t\tparseCssInJsToInlineCss(finalStyles.image) !== ''\n\t\t\t\t? ` style=\"${parseCssInJsToInlineCss(finalStyles.image)}\"`\n\t\t\t\t: ''\n\t\t}>`;\n\t};\n\n\tcustomRenderer.link = (href, _, text) => {\n\t\treturn `<a href=\"${href}\" target=\"_blank\"${\n\t\t\tparseCssInJsToInlineCss(finalStyles.link) !== ''\n\t\t\t\t? ` style=\"${parseCssInJsToInlineCss(finalStyles.link)}\"`\n\t\t\t\t: ''\n\t\t}>${text}</a>`;\n\t};\n\n\tcustomRenderer.list = (body, ordered, start) => {\n\t\tconst type = ordered ? 'ol' : 'ul';\n\t\tconst startatt = ordered && start !== 1 ? ' start=\"' + start + '\"' : '';\n\t\tconst styles = parseCssInJsToInlineCss(finalStyles[ordered ? 'ol' : 'ul']);\n\t\treturn (\n\t\t\t'<' +\n\t\t\ttype +\n\t\t\tstartatt +\n\t\t\t`${styles !== '' ? ` style=\"${styles}\"` : ''}>\\n` +\n\t\t\tbody +\n\t\t\t'</' +\n\t\t\ttype +\n\t\t\t'>\\n'\n\t\t);\n\t};\n\n\tcustomRenderer.listitem = (text) => {\n\t\treturn `<li${\n\t\t\tparseCssInJsToInlineCss(finalStyles.li) !== ''\n\t\t\t\t? ` style=\"${parseCssInJsToInlineCss(finalStyles.li)}\"`\n\t\t\t\t: ''\n\t\t}>${text}</li>\\n`;\n\t};\n\n\tcustomRenderer.paragraph = (text) => {\n\t\treturn `<p${\n\t\t\tparseCssInJsToInlineCss(finalStyles.p) !== ''\n\t\t\t\t? ` style=\"${parseCssInJsToInlineCss(finalStyles.p)}\"`\n\t\t\t\t: ''\n\t\t}>${text}</p>\\n`;\n\t};\n\n\tcustomRenderer.strong = (text) => {\n\t\treturn `<strong${\n\t\t\tparseCssInJsToInlineCss(finalStyles.bold) !== ''\n\t\t\t\t? ` style=\"${parseCssInJsToInlineCss(finalStyles.bold)}\"`\n\t\t\t\t: ''\n\t\t}>${text}</strong>`;\n\t};\n\n\tcustomRenderer.table = (header, body) => {\n\t\tif (body) body = `<tbody>${body}</tbody>`;\n\n\t\treturn `<table${\n\t\t\tparseCssInJsToInlineCss(finalStyles.table) !== ''\n\t\t\t\t? ` style=\"${parseCssInJsToInlineCss(finalStyles.table)}\"`\n\t\t\t\t: ''\n\t\t}>\\n<thead${\n\t\t\tparseCssInJsToInlineCss(finalStyles.thead) !== ''\n\t\t\t\t? ` style=\"${parseCssInJsToInlineCss(finalStyles.thead)}\"`\n\t\t\t\t: ''\n\t\t}>\\n${header}</thead>\\n${body}</table>\\n`;\n\t};\n\n\tcustomRenderer.tablecell = (content, flags) => {\n\t\tconst type = flags.header ? 'th' : 'td';\n\t\tconst tag = flags.align\n\t\t\t? `<${type} align=\"${flags.align}\"${\n\t\t\t\t\tparseCssInJsToInlineCss(finalStyles.td) !== ''\n\t\t\t\t\t\t? ` style=\"${parseCssInJsToInlineCss(finalStyles.td)}\"`\n\t\t\t\t\t\t: ''\n\t\t\t\t}>`\n\t\t\t: `<${type}${\n\t\t\t\t\tparseCssInJsToInlineCss(finalStyles.td) !== ''\n\t\t\t\t\t\t? ` style=\"${parseCssInJsToInlineCss(finalStyles.td)}\"`\n\t\t\t\t\t\t: ''\n\t\t\t\t}>`;\n\t\treturn tag + content + `</${type}>\\n`;\n\t};\n\n\tcustomRenderer.tablerow = (content) => {\n\t\treturn `<tr${\n\t\t\tparseCssInJsToInlineCss(finalStyles.tr) !== ''\n\t\t\t\t? ` style=\"${parseCssInJsToInlineCss(finalStyles.tr)}\"`\n\t\t\t\t: ''\n\t\t}>\\n${content}</tr>\\n`;\n\t};\n\n\tObject.entries(overrideRenderers || {}).forEach(([tag, renderer]) => {\n\t\tcustomRenderer[tag as keyof Renderer] = renderer as any;\n\t});\n\n\treturn customRenderer;\n};\n","import { StylesType } from \"./types\";\n\nconst emptyStyle = {};\n\nconst baseHeaderStyles = {\n  fontWeight: \"500\",\n  paddingTop: 20,\n};\n\nconst h1 = {\n  ...baseHeaderStyles,\n  fontSize: \"2.5rem\",\n};\n\nconst h2 = {\n  ...baseHeaderStyles,\n  fontSize: \"2rem\",\n};\nconst h3 = {\n  ...baseHeaderStyles,\n  fontSize: \"1.75rem\",\n};\nconst h4 = {\n  ...baseHeaderStyles,\n  fontSize: \"1.5rem\",\n};\nconst h5 = {\n  ...baseHeaderStyles,\n  fontSize: \"1.25rem\",\n};\nconst h6 = {\n  ...baseHeaderStyles,\n  fontSize: \"1rem\",\n};\n\nconst bold = {\n  fontWeight: \"bold\",\n};\n\nconst italic = {\n  fontStyle: \"italic\",\n};\n\nconst blockQuote = {\n  background: \"#f9f9f9\",\n  borderLeft: \"10px solid #ccc\",\n  margin: \"1.5em 10px\",\n  padding: \"1em 10px\",\n};\n\nconst codeInline = {\n  color: \"#212529\",\n  fontSize: \"87.5%\",\n  display: \"inline\",\n  background: \" #f8f8f8\",\n  fontFamily: `SFMono-Regular,Menlo,Monaco,Consolas,monospace`,\n};\n\nconst codeBlock = {\n  ...codeInline,\n  paddingTop: 10,\n  paddingRight: 10,\n  paddingLeft: 10,\n  paddingBottom: 1,\n  marginBottom: 20,\n  background: \" #f8f8f8\",\n};\n\nconst link = {\n  color: \"#007bff\",\n  textDecoration: \"underline\",\n  backgroundColor: \"transparent\",\n};\n\nexport const styles: StylesType = {\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6,\n  blockQuote,\n  bold,\n  italic,\n  link,\n  codeBlock: { ...codeBlock, wordWrap: \"break-word\" },\n  codeInline: { ...codeInline, wordWrap: \"break-word\" },\n  p: emptyStyle,\n  li: emptyStyle,\n  ul: emptyStyle,\n  ol: emptyStyle,\n  image: emptyStyle,\n  br: emptyStyle,\n  hr: emptyStyle,\n  table: emptyStyle,\n  thead: emptyStyle,\n  tbody: emptyStyle,\n  th: emptyStyle,\n  td: emptyStyle,\n  tr: emptyStyle,\n  strikethrough: emptyStyle,\n};\n","import { MarkdownParser } from './parser';\nimport { parseMarkdownToJSXProps } from './types';\n\nexport const parseMarkdownToJSX = ({\n\tmarkdown,\n\tcustomStyles,\n\tcustomRenderers,\n}: parseMarkdownToJSXProps) => {\n\tconst parser = new MarkdownParser({ customStyles, customRenderers });\n\treturn parser.parse(markdown);\n};\n","import * as React from 'react';\nimport { StylesType } from '../types';\nimport { parseMarkdownToJSX } from '../parseMarkdownToJSX';\n\ninterface EmailMarkdownProps {\n\tmarkdown: string;\n\tmarkdownCustomStyles?: StylesType;\n\tmarkdownContainerStyles?: React.CSSProperties;\n}\n\nexport const EmailMarkdown: React.FC<EmailMarkdownProps> = ({\n\tmarkdown,\n\tmarkdownCustomStyles,\n\tmarkdownContainerStyles,\n}) => {\n\tconst parsedMarkdown = parseMarkdownToJSX({\n\t\tmarkdown,\n\t\tcustomStyles: markdownCustomStyles,\n\t});\n\n\treturn (\n\t\t<div\n\t\t\tstyle={markdownContainerStyles}\n\t\t\tdangerouslySetInnerHTML={{ __html: parsedMarkdown }}\n\t\t/>\n\t);\n};\n"]}